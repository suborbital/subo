name: ci

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - v*

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.45

  meta:
    runs-on: ubuntu-latest
    outputs:
      repo: ${{ fromJSON(steps.github.outputs.result).repo }}
      branch: ${{ fromJSON(steps.github.outputs.result).branch }}

    steps:
      - name: Get repo and branch name
        id: github
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const results = { repo: undefined, branch: undefined}

            if (context.eventName == 'pull_request') {
              results.repo = context.payload.pull_request.head.repo.full_name,
              results.branch = context.payload.pull_request.head.ref
            } else {
              results.repo = context.payload.repository.full_name
              results.branch = context.ref.replace(/^refs\/heads\/|^refs\//, '')
            }
            console.log(results)

            if (!results.repo || !results.branch) {
              console.log('repo and branch must both be defined')
              process.exit(1)
            }
            return results

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Cache Go mods
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - run: go mod download

      - name: Build Subo
        run: |
          make subo

      - name: Run unit tests
        run: |
          make test

      - name: Upload subo binary
        uses: actions/upload-artifact@v3
        with:
          name: subo
          path: ~/go/bin/subo
          if-no-files-found: error

  image:
    runs-on: ubuntu-latest

    steps:
      - uses: docker/setup-buildx-action@v2

      - name: Build suborbital/subo:dev image
        uses: docker/build-push-action@v3
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Dockerfile
          tags: suborbital/subo:dev
          outputs: type=docker,dest=/tmp/subo.tar

      - name: Upload subo image
        uses: actions/upload-artifact@v3
        with:
          name: subo.tar
          path: /tmp/subo.tar
          if-no-files-found: error

  smoke:
    needs: [image, meta, test]
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      fail-fast: false
      matrix:
        language:
          - assemblyscript
          - grain
          - javascript
          - rust
          - swift
          - tinygo
          - typescript
          - wat
        include:
          - language: assemblyscript
            image: builder-as
            dockerfile: builder/docker/assemblyscript/Dockerfile
          - language: grain
            image: builder-gr
            dockerfile: builder/docker/grain/Dockerfile
          - language: javascript
            image: builder-js
            dockerfile: builder/docker/javascript/Dockerfile
          - language: rust
            image: builder-rs
            dockerfile: builder/docker/rust/Dockerfile
          - language: swift
            image: builder-swift
            dockerfile: builder/docker/swift/Dockerfile
          - language: tinygo
            image: builder-tinygo
            dockerfile: builder/docker/tinygo/Dockerfile
          - language: typescript
            image: builder-js
            dockerfile: builder/docker/javascript/Dockerfile
          - language: wat
            image: builder-wat
            dockerfile: builder/docker/wat/Dockerfile

    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - name: Download subo binary
        uses: actions/download-artifact@v3
        with:
          name: subo
          path: ~/bin
      - name: Run chmod +x subo binary
        run: |
          chmod +x $HOME/bin/subo
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Download subo image
        uses: actions/download-artifact@v3
        with:
          name: subo.tar
          path: /tmp
      - name: Load subo image into Docker
        run: |
          docker load --input /tmp/subo.tar
          docker image tag suborbital/subo:dev localhost:5000/suborbital/subo:dev
          docker image ls -a
          docker push localhost:5000/suborbital/subo:dev
          docker buildx imagetools inspect localhost:5000/suborbital/subo:dev

      - name: Build ${{ matrix.image }}:dev image
        uses: docker/build-push-action@v3
        with:
          build-contexts: |
            suborbital/subo:dev=docker-image://localhost:5000/suborbital/subo:dev
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ${{ matrix.dockerfile }}
          load: true
          tags: suborbital/${{ matrix.image }}:dev

      - name: Create runnable
        run: subo create runnable ${{ matrix.language }}-test --lang ${{ matrix.language }} --repo ${{ needs.meta.outputs.repo }} --branch ${{ needs.meta.outputs.branch }}

      - name: Run subo build
        run: subo build ${{ matrix.language }}-test --builder-tag dev

      - name: Check TinyGo version number consistency
        if: matrix.language == 'tinygo'
        run: builder/docker/tinygo/smoke.sh

  release-image-subo:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [image, lint, test, smoke]
    runs-on: ubuntu-latest

    steps:
      - uses: docker/setup-buildx-action@v2
      - uses: docker/setup-qemu-action@v2

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/metadata-action@v4
        id: docker_meta
        with:
          images: suborbital/subo,ghcr.io/suborbital/subo
          tags: |
            type=match,pattern=(v.*)
          flavor: |
            latest=auto

      - name: Build subo image
        uses: docker/build-push-action@v3
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  release-image:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [image, lint, test, smoke, release-image-subo]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - builder-as
          - builder-gr
          - builder-js
          - builder-rs
          - builder-swift
          - builder-tinygo
          - builder-wat
        include:
          - image: builder-as
            dockerfile: builder/docker/assemblyscript/Dockerfile
          - image: builder-gr
            dockerfile: builder/docker/grain/Dockerfile
          - image: builder-js
            dockerfile: builder/docker/javascript/Dockerfile
          - image: builder-rs
            dockerfile: builder/docker/rust/Dockerfile
          - image: builder-swift
            dockerfile: builder/docker/swift/Dockerfile
          - image: builder-tinygo
            dockerfile: builder/docker/tinygo/Dockerfile
          - image: builder-wat
            dockerfile: builder/docker/wat/Dockerfile

    steps:
      - uses: docker/setup-buildx-action@v2
      - uses: docker/setup-qemu-action@v2

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/metadata-action@v4
        id: subo_meta
        with:
          images: ghcr.io/suborbital/subo
          tags: |
            type=match,pattern=(v.*)
          flavor: |
            latest=false
      - uses: docker/metadata-action@v4
        id: docker_meta
        with:
          images: suborbital/${{ matrix.image }},ghcr.io/suborbital/${{ matrix.image }}
          tags: |
            type=match,pattern=(v.*)
          flavor: |
            latest=auto
          labels: |
            org.opencontainers.image.title=${{ matrix.image }}

      - name: Build ${{ matrix.image }} image
        uses: docker/build-push-action@v3
        with:
          build-contexts: |
            suborbital/subo:dev=docker-image://${{ steps.subo_meta.outputs.tags }}
          cache-from: type=gha
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  release-bin:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [image, lint, test, smoke, release-image]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Cache Go mods
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - run: go mod download

      - uses: tibdex/github-app-token@v1
        id: generate_token
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Get committer name and email
        id: committer
        run: |
          echo "::set-output name=name::$(git --no-pager log -s --format="%an" -1)"
          echo "::set-output name=email::$(git --no-pager log -s --format="%ae" -1)"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          GITHUB_ACTOR_NAME: ${{ steps.committer.outputs.name }}
          GITHUB_ACTOR_EMAIL: ${{ steps.committer.outputs.email }}
